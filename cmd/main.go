// cmd/main.go
package main

import (
	"fmt"
	"os"

	"pm/internal/cli"
	"pm/internal/logger"
)

func main() {
	baseLogger := logger.NewBaseLogger()

	cmd, err := cli.Parse()
	if err != nil {
		baseLogger.Error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–∞–Ω–¥—ã", "error", err.Error())
		os.Exit(1)
	}

	log := logger.NewLogger(cmd.LogLevel)
	log.Info("–ó–∞–ø—É—Å–∫ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞",
		"–≤–µ—Ä—Å–∏—è", "0.1.0",
		"–∫–æ–º–∞–Ω–¥–∞", string(cmd.Type),
		"–∫–æ–Ω—Ñ–∏–≥", cmd.ConfigPath,
	)

	switch cmd.Type {
	case cli.Create:
		if err := handleCreate(log, cmd.ConfigPath); err != nil {
			log.Error("–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –æ—à–∏–±–∫–æ–π", "error", err.Error())
			os.Exit(1)
		}
	case cli.Update:
		if err := handleUpdate(log, cmd.ConfigPath); err != nil {
			log.Error("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –æ—à–∏–±–∫–æ–π", "error", err.Error())
			os.Exit(1)
		}
	}
}

func handleCreate(log *logger.Logger, configPath string) error {
	fmt.Printf("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –∏–∑ %s...\n", configPath)

	// –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞:
	// 1. –ß—Ç–µ–Ω–∏–µ packet.json
	// 2. –°–±–æ—Ä —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ archive.CollectFiles
	// 3. –°–æ–∑–¥–∞–Ω–∏–µ ZIP —á–µ—Ä–µ–∑ archive.CreateZip
	// 4. –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ SSH

	fmt.Println("‚úÖ –ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω (–∑–∞–≥–ª—É—à–∫–∞)")
	return nil
}

func handleUpdate(log *logger.Logger, configPath string) error {
	fmt.Printf("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤ –∏–∑ %s...\n", configPath)

	// –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞:
	// 1. –ß—Ç–µ–Ω–∏–µ packages.json
	// 2. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–æ–≤ –ø–æ SSH
	// 3. –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ —á–µ—Ä–µ–∑ archive.ExtractZip

	fmt.Println("‚úÖ –ü–∞–∫–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã (–∑–∞–≥–ª—É—à–∫–∞)")
	return nil
}
